{"version":3,"file":"index.esm.mjs","sources":["../src/action.ts","../src/base.ts","../src/index.ts"],"sourcesContent":["import { ActionsForType, ActionValue, AnyType } from \"./types\";\r\n\r\nexport enum ActionTypes {\r\n  Set = \"set\",\r\n  Trim = \"trim\",\r\n  Increment = \"increment\",\r\n  Append = \"append\",\r\n  Prepend = \"prepend\",\r\n}\r\n\r\nexport class Action<\r\n  T extends AnyType,\r\n  A extends ActionsForType<T>,\r\n  V extends ActionValue<T, A>\r\n> {\r\n  constructor(public readonly operation: A, public readonly value: V) {}\r\n}\r\n","import type BaseClassSDK from \"deta/dist/types/base\";\r\nimport { z } from \"zod\";\r\nimport type {\r\n  InsertOptions,\r\n  PutManyOptions,\r\n  PutOptions,\r\n  UpdateOptions,\r\n} from \"deta/dist/types/types/base/request\";\r\nimport type {\r\n  AnyType,\r\n  FetchOptions,\r\n  FetchResponse,\r\n  GetResponse,\r\n  InsertResponse,\r\n  PutManyResponse,\r\n  PutResponse,\r\n  RecordType,\r\n  Updates,\r\n} from \"./types\";\r\nimport { Action, ActionTypes } from \"./action\";\r\nimport { Query } from \"./query\";\r\n\r\nexport class SchemaBaseClass<T extends RecordType> {\r\n  protected manySchema: z.ZodArray<z.ZodType<T>>;\r\n\r\n  constructor(\r\n    protected base: BaseClassSDK,\r\n    public readonly schema: z.ZodType<T>,\r\n    protected validation: boolean = true\r\n  ) {\r\n    this.manySchema = z.array(schema);\r\n  }\r\n\r\n  /**\r\n   * put is the fastest way to store an item in a Base. If an item already exists under the given key, it will be replaced. In the case you do not provide a key, Base will automatically generate a 12-character string as a key.\r\n   * @param data The data to be stored.\r\n   * @param key The key to store the data under. Will be auto generated if not provided.\r\n   * @param options Optional parameters.\r\n   * @returns Returns a promise which resolves to a PutResponse containing the item. If the operation did not complete successfully, throws an Error.\r\n   */\r\n  put(data: T, key?: string, options?: PutOptions) {\r\n    this.parse(data);\r\n    return this.base.put(data, key, options) as Promise<PutResponse<T>>;\r\n  }\r\n\r\n  /**\r\n   * Retrieves an item by its key.\r\n   * @param key The key of the item to retrieve.\r\n   * @returns Returns a promise which resolves to a GetResponse. If the item is found, the response will contain the item. If not found, the response will be null.\r\n   */\r\n  get(key: string) {\r\n    return this.base.get(key) as Promise<GetResponse<T>>;\r\n  }\r\n\r\n  /**\r\n   * Inserts a single item, but is different from put in that it will throw an error of the key already exists in the Base.\r\n   * @param data The data to be stored.\r\n   * @param key The key to store the data under. Will be auto generated if not provided.\r\n   * @param options Optional parameters.\r\n   * @returns Returns a promise which resolves to an InsertResponse containing the item. If the operation did not complete successfully, or the key already exists, throws an Error.\r\n   */\r\n  insert(data: T, key?: string, options?: InsertOptions) {\r\n    this.parse(data);\r\n    return this.base.insert(data, key, options) as Promise<InsertResponse<T>>;\r\n  }\r\n\r\n  // protected splitIntoChunks(items: T[], chunkSize = 25) {\r\n  //   const chunks: T[][] = [];\r\n  //   for (let i = 0; i < items.length; i += chunkSize) {\r\n  //     chunks.push(items.slice(i, i + chunkSize));\r\n  //   }\r\n  //   return chunks;\r\n  // }\r\n\r\n  /**\r\n   * Puts up to 25 items at once with a single call.\r\n   * @param items The list of items to be stored.\r\n   * @param options Optional parameters.\r\n   * @returns Returns a promise which resolves to a PutManyResponse containing the items. If the operation did not complete successfully, or items contains more than 25 items, throws an Error.\r\n   */\r\n  async putMany(items: T[], options?: PutManyOptions) {\r\n    this.parse(...items);\r\n\r\n    // if (options?.autoPaginate && items.length > 25) {\r\n    //   const response: PutManyResponse<T> = { processed: { items: [] } };\r\n    //   const chunks = this.splitIntoChunks(items);\r\n    //   const promises = chunks.map((chunk) => this.base.putMany(chunk, options));\r\n    //   const results = await Promise.allSettled(promises);\r\n\r\n    //   for (let i = 0; i < results.length; i++) {\r\n    //     const result = results[i];\r\n    //     if (result.status == \"rejected\") continue;\r\n    //     const { items } = result.value.processed as any;\r\n    //     response.processed.items.push(...items);\r\n    //   }\r\n\r\n    //   return response;\r\n    // }\r\n\r\n    return (await this.base.putMany(items, options)) as PutManyResponse<T>;\r\n  }\r\n\r\n  /**\r\n   * Updates an existing item.\r\n   * @param updates An object describing the updates on the item.\r\n   * @param key The key of the item to be updated.\r\n   * @param options Optional parameters.\r\n   * @returns A promise which resolves to null\r\n   */\r\n  update(updates: Updates<T>, key: string, options?: UpdateOptions) {\r\n    updates = Object.fromEntries(\r\n      Object.entries(updates).map(([key, value]) => {\r\n        if (value instanceof Action) {\r\n          switch (value.operation) {\r\n            case ActionTypes.Append:\r\n              return [key, this.base.util.append(value.value as any)];\r\n            case ActionTypes.Increment:\r\n              return [key, this.base.util.increment(value.value as any)];\r\n            case ActionTypes.Prepend:\r\n              return [key, this.base.util.prepend(value.value as any)];\r\n            case ActionTypes.Trim:\r\n              return [key, this.base.util.trim()];\r\n          }\r\n        }\r\n        return [key, value];\r\n      })\r\n    ) as any;\r\n\r\n    return this.base.update(updates, key, options);\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of items matching a query. It will retrieve everything if no query is provided, up to a limit of 1 MB or 1000 items.\r\n\r\nA query is composed of a single query object or a list of query objects. In the case of a list, the indvidual queries are OR’ed.\r\n   * @param query The query to filter the items by.\r\n   * @param options Optional parameters.\r\n   * @returns \r\n   */\r\n  async fetch(query?: Query<T>, options?: FetchOptions) {\r\n    const limit = options?.limit ?? Infinity;\r\n    const response = await this.base.fetch(query as any, options);\r\n    while (options?.autoPaginate && response.count < limit) {\r\n      const nextResponse = await this.base.fetch(query as any, {\r\n        limit: limit - response.count,\r\n        last: response.last,\r\n        desc: options?.desc,\r\n      });\r\n      response.last = nextResponse.last;\r\n      response.items.push(...nextResponse.items);\r\n      response.count += nextResponse.count;\r\n    }\r\n    return response as FetchResponse<T>;\r\n  }\r\n\r\n  /**\r\n   * Deletes an item by its key.\r\n   * @param key The key of the item to delete.\r\n   * @returns Returns a promise which resolves to a DeleteResponse. The response will always be null, even if the key does not exist.\r\n   */\r\n  delete(key: string) {\r\n    return this.base.delete(key);\r\n  }\r\n\r\n  // async deleteManyPaginate(keys: string[]) {\r\n  //   await Promise.all(keys.map((key) => this.base.delete(key)));\r\n  //   return null;\r\n  // }\r\n\r\n  protected parse(...data: unknown[]) {\r\n    if (this.validation) {\r\n      this.manySchema.parse(data);\r\n    }\r\n    this.base.util;\r\n  }\r\n\r\n  /**\r\n   * The util attribute of a Base instance is an instance of the Util class. It provides utility methods for use in update operations.\r\n   */\r\n  util = {\r\n    /**\r\n     * Removes an attribute from the item.\r\n     * @returns\r\n     */\r\n    trim() {\r\n      return new Action(ActionTypes.Trim, undefined);\r\n    },\r\n\r\n    /**\r\n     * Increments the value of an attribute. The provided value can be any positive or negative integer. The attribute’s value must be a number. The default value is 1.\r\n     * @param value\r\n     * @returns\r\n     */\r\n    increment<T extends AnyType>(value: T) {\r\n      return new Action(ActionTypes.Increment, value);\r\n    },\r\n\r\n    /**\r\n     * Appends to a list. The value can be a primitive type or a array / list.\r\n     * @param value\r\n     * @returns\r\n     */\r\n    append<T extends AnyType>(value: T) {\r\n      return new Action(ActionTypes.Append, value);\r\n    },\r\n\r\n    /**\r\n     * Prepends to a list. The value can be a primitive type or an array / list.\r\n     * @param value\r\n     * @returns\r\n     */\r\n    prepend<T extends AnyType>(value: T) {\r\n      return new Action(ActionTypes.Prepend, value);\r\n    },\r\n  };\r\n} /** TODO: Add JSDoc documentation */\r\n","/**\r\n * Project: Base-Safe\r\n * Entry: index.ts\r\n * Author: Zuma206\r\n */\r\n\r\nimport { Deta as DetaSDK } from \"deta\";\r\nimport type DetaClassSDK from \"deta/dist/types/deta\";\r\nimport { z } from \"zod\";\r\nimport { RecordType } from \"./types\";\r\nimport { SchemaBaseClass } from \"./base\";\r\n\r\nclass DetaClass {\r\n  constructor(protected deta: DetaClassSDK) {}\r\n\r\n  Base(baseName: string, host?: string) {\r\n    return this.deta.Base(baseName, host);\r\n  }\r\n\r\n  Drive(driveName: string, host?: string) {\r\n    return this.deta.Drive(driveName, host);\r\n  }\r\n\r\n  SchemaBase<T extends RecordType>(\r\n    baseName: string,\r\n    schema: z.ZodType<T>,\r\n    validation = true,\r\n    host?: string\r\n  ) {\r\n    return new SchemaBaseClass(\r\n      this.deta.Base(baseName, host),\r\n      schema,\r\n      validation\r\n    );\r\n  }\r\n}\r\n\r\nexport function Deta(projectKey?: string, authToken?: string) {\r\n  return new DetaClass(DetaSDK(projectKey, authToken));\r\n}\r\n\r\nexport { z };\r\n"],"names":["ActionTypes","Action","operation","value","this","_settle","pact","state","s","_Pact","o","bind","v","observer","prototype","then","onFulfilled","onRejected","result","callback","e","_this","thenable","SchemaBaseClass","base","schema","validation","manySchema","util","trim","Trim","undefined","increment","Increment","append","Append","prepend","Prepend","z","array","_proto","put","data","key","options","parse","get","insert","putMany","items","apply","Promise","resolve","reject","update","updates","_this2","Object","fromEntries","entries","map","_ref","fetch","query","_options$limit","_this3","limit","Infinity","response","_temp","_for","autoPaginate","count","last","desc","nextResponse","_response$items","push","slice","call","arguments","DetaClass","deta","Base","baseName","host","Drive","driveName","SchemaBase","Deta","projectKey","authToken","DetaSDK"],"mappings":"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"}